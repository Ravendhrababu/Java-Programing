Collections in Java
====================
The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.

Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, 
manipulation, and deletion.

Java Collection means a single unit of objects. Java Collection framework provides many interfaces 
(Set, List, Queue, Deque) and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

What is Collection in Java
---------------------------
A Collection represents a single unit of objects, i.e., a group.

What is a framework in Java
---------------------------
It provides ready-made architecture.
It represents a set of classes and interfaces.
It is optional.

What is Collection framework
-----------------------------
The Collection framework represents a unified architecture for storing and manipulating a group of objects. 
It has:
Interfaces and its implementations, i.e., classes
Algorithm

Iterable Interface
===================
The Iterable interface is the root interface for all the collection classes. The Collection interface extends the 
Iterable interface and therefore all the subclasses of Collection interface also implement the Iterable interface.

It contains only one abstract method. i.e.,

Iterator<T> iterator()  
It returns the iterator over the elements of type T.

Collection Interface
======================
The Collection interface is the interface which is implemented by all the classes in the collection framework. 
It declares the methods that every collection will have. In other words, we can say that the Collection interface 
builds the foundation on which the collection framework depends.

Some of the methods of Collection interface are Boolean add ( Object obj), Boolean addAll ( Collection c), 
void clear(), etc. which are implemented by all the subclasses of Collection interface.

List Interface
===============
List interface is the child interface of Collection interface. It inhibits a list type data structure in which 
we can store the ordered collection of objects. It can have duplicate values.

List interface is implemented by the classes ArrayList, LinkedList, Vector, and Stack.

To instantiate the List interface, we must use :

List <data-type> list1= new ArrayList();  
List <data-type> list2 = new LinkedList();  
List <data-type> list3 = new Vector();  
List <data-type> list4 = new Stack();  
There are various methods in List interface that can be used to insert, delete, and access the elements from the list.


ArrayList
==========
Java ArrayList class uses a dynamic array for storing the elements. It is like an array, but there is no size limit. 
We can add or remove elements any time. So, it is much more flexible than the traditional array. 
It is found in the java.util package. It is like the Vector in C++.

The ArrayList in Java can have the duplicate elements also. It implements the List interface so we can use all the 
methods of the List interface here. The ArrayList maintains the insertion order internally.

It inherits the AbstractList class and implements List interface.

The important points about the Java ArrayList class are:
--------------------------------------------------------
Java ArrayList class can contain duplicate elements.
Java ArrayList class maintains insertion order.
Java ArrayList class is non synchronized.
Java ArrayList allows random access because the array works on an index basis.
In ArrayList, manipulation is a little bit slower than the LinkedList in Java because a lot of shifting needs to 
occur if any element is removed from the array list.
We can not create an array list of the primitive types, such as int, float, char, etc. It is required to use the 
required wrapper class in such cases. For example:
ArrayList<int> al = ArrayList<int>(); // does not work  
ArrayList<Integer> al = new ArrayList<Integer>(); // works fine  
Java ArrayList gets initialized by the size. The size is dynamic in the array list, which varies according to the 
elements getting added or removed from the list.

Heterogenious data is allowed
Insertion order is preserved (index)
Duplicate elements are allowed
Multiple nulls are allowed


HashSet
========
Java HashSet class is used to create a collection that uses a hash table for storage. 
It inherits the AbstractSet class and implements Set interface.

The important points about Java HashSet class are:
----------------------------------------------------
HashSet stores the elements by using a mechanism called hashing.
HashSet contains unique elements only.
HashSet allows null value.
HashSet class is non synchronized.
HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
HashSet is the best approach for search operations.
The initial default capacity of HashSet is 16, and the load factor is 0.75.

Heterogenious data is allowed.
insertion order is not preserved.
duplicate elements are not allowed.
duplicate null are not allowed.

Difference between List and Set
-------------------------------
A list can contain duplicate elements whereas Set contains unique elements only.


HashMap
=======
Java HashMap class implements the Map interface which allows us to store key and value pair, where keys should be unique. 
If you try to insert the duplicate key, it will replace the element of the corresponding key. 
It is easy to perform operations using the key index like updation, deletion, etc. 
HashMap class is found in the java.util package.

HashMap in Java is like the legacy Hashtable class, but it is not synchronized. 
It allows us to store the null elements as well, but there should be only one null key. 
Since Java 5, it is denoted as HashMap<K,V>, where K stands for key and V for value. 
It inherits the AbstractMap class and implements the Map interface.  

Points to remember
---------------------
Java HashMap contains values based on the key.
Java HashMap contains only unique keys.
Java HashMap may have one null key and multiple null values.
Java HashMap is non synchronized.
Java HashMap maintains no order.
The initial default capacity of Java HashMap class is 16 with a load factor of 0.75.



